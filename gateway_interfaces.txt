

Specifications are used by third party developers to implement solutions into a web framework for example


Web Server Gateway Interface (WSGI)

WSGI apps are single,synchronous callable that takes in a request and returns a response


Callable is anything that can be called __call__ in python


WGSI is then a python specification for a how a server handles a request. This now provides a universal interface between python apps and web servers


WSGI specifies:

- Must be a callable with request and create_resp_fn parameters
- Must call the create_resp_fn callback before sending the body
- Must return an iterable with pieces / chunks of the document body

Calling the create_resp_fn creates status codes and headers

A bare bones flask server implements the WSGI protocol

def app (request: dict, create_resp_fn):
	create_resp_fn('200 OK', [('Content-Type','text/plain')])
	return ["Hello World!\n"]




Asynchronous Server Gateway Interface (ASGI)


A spiritual successor to WSGI, intended to provide a standard interface between async-capable python web servers, frameworks and applications

When defining an ASGI server, it is an asynchronous callable that takes in 3 arguments:

	- scope: a dict containing details about the incoming connection
	- send: an asynchronous callable that lets the application send 		event messages to the client
	- recieve: an asynchronous callable which lets the application 				recieve event messages from the client


ASGI enables websockets which allow for 2 way communication where a server can initiate communication

the server can keep track of each client and push messages to a subset of clients

